import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from 'app/store';
import axios from 'axios';

export interface ImagesReviewerState {
    fetchedImgUrl: string | null
    savedImgsUrls: string[]
    rejectedImgsUrls: string[]
}

const initialState: ImagesReviewerState = {
    fetchedImgUrl: null,
    savedImgsUrls: [],
    rejectedImgsUrls: []
}


export const imagesReviewerSlice = createSlice({
    name: 'imagesReviewer',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        initSavedImgs: (state, action: PayloadAction<string[]>) => {
            state.savedImgsUrls = action.payload
        },
        addSavedImgUrl: (state, action: PayloadAction<string>) => {
            state.savedImgsUrls.push(action.payload)
        },
        initRejectedImgs: (state, action: PayloadAction<string[]>) => {
            state.rejectedImgsUrls = action.payload
        },
        addRejectedImgUrl: (state, action: PayloadAction<string>) => {
            state.rejectedImgsUrls.push(action.payload)
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.  
    extraReducers: (builder) => {
        builder
            .addCase(handleFetchImgUrlThunk.fulfilled, (state, action: PayloadAction<string | undefined>) => {
                state.fetchedImgUrl = action.payload!
            })
    }
})



export default imagesReviewerSlice.reducer;


//Selectors 
export const fetchedImgUrl = (state: RootState) => state.imagesReviewer.fetchedImgUrl
export const savedImgsUrls = (state: RootState) => state.imagesReviewer.savedImgsUrls
export const rejectedImgsUrls = (state: RootState) => state.imagesReviewer.rejectedImgsUrls


const getRandomImage = async () => {
    return (await axios.get('https://api.unsplash.com/photos/random?client_id=S00f6b0q_JEjib3qrC4Bcbnt6sLzBQHxPt-XcmFEhhw')).data.urls.thumb as string
}

//https://redux-toolkit.js.org/api/createAsyncThunk
export const handleFetchImgUrlThunk = createAsyncThunk<string | undefined , void, { state: RootState }>(
    'imagesReviewer/handleFetchImgUrlThunk',
    async (_, { getState }) => { //https://stackoverflow.com/questions/27637013/what-is-the-meaning-of-an-underscore-in-javascript-function-parameter
        const _imgUrl = await getRandomImage();
        if (getState().imagesReviewer.rejectedImgsUrls.includes(_imgUrl)) {
            handleFetchImgUrlThunk()
        }
        else {
            return _imgUrl
        }
    }
)

export const handleApproveImageThunk = (_newImgUrl: string): AppThunk<void> => (
    dispatch
) => {
    udpateLocalStorageSavedImgs(_newImgUrl)
    dispatch(imagesReviewerSlice.actions.addSavedImgUrl(_newImgUrl))
    dispatch(handleFetchImgUrlThunk())
}

export const initSavedImgsListFromLocalStorage = (): AppThunk => (
    dispatch
) => {
    const retrivedData = localStorage.getItem('_savedImages')
    if (retrivedData) {
        dispatch(imagesReviewerSlice.actions.initSavedImgs(JSON.parse(retrivedData) as string[]))
    }
}

const udpateLocalStorageSavedImgs = (_newImgUrl: string) => {
    const retrieved = localStorage.getItem('_savedImages')
    if (retrieved) {
        let _localStorageSavedImgs = JSON.parse(retrieved)
        _localStorageSavedImgs.push(_newImgUrl)
        localStorage.setItem("_savedImages", JSON.stringify(_localStorageSavedImgs))
    }
    else {
        localStorage.setItem("_savedImages", JSON.stringify([_newImgUrl]))
    }

}

export const handleRejectImageThunk = (_newImgUrl: string):  AppThunk<void> => (
    dispatch
) => {
    udpateLocalStorageRejectedImgs(_newImgUrl)
    dispatch(imagesReviewerSlice.actions.addRejectedImgUrl(_newImgUrl))
    dispatch(handleFetchImgUrlThunk())
}



export const initRejectedImgsListFromLocalStorage = ():  AppThunk<void> => (
    dispatch
) => {
    const retrivedData = localStorage.getItem('_rejectedImages')
    if (retrivedData) {
        dispatch(imagesReviewerSlice.actions.initRejectedImgs(JSON.parse(retrivedData) as string[]))
    }
}


const udpateLocalStorageRejectedImgs = (_newImgUrl: string) => {
    const retrieved = localStorage.getItem('_rejectedImages')
    if (retrieved) {
        let _localStorageRejectedImgs = JSON.parse(retrieved)
        _localStorageRejectedImgs.push(_newImgUrl)
        localStorage.setItem("_rejectedImages", JSON.stringify(_localStorageRejectedImgs))
    }
    else {
        localStorage.setItem("_rejectedImages", JSON.stringify([_newImgUrl]))
    }
}